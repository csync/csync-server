---
stages:
- name: Dockerhub
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      url: ${CF_TARGET_URL}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
    IMAGE_NAME: ${CF_APP}
    USE_CACHED_LAYERS: 'true'
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nunset DOCKER_HOST DOCKER_TLS_VERIFY\n\
      echo  ${REGISTRY_URL}/csync:latest\nexport IMAGE_NAME=${REGISTRY_URL}/csync:latest\n\
      cf ic cpi ibmcom/csync:latest ${REGISTRY_URL}/csync:latest\n"
- name: Deploy Image
  triggers:
  - type: stage
  properties:
  - name: IMAGE_NAME
    value: ${CCS_REGISTRY_HOST}/${NAMESPACE}/csync:latest
    type: text
  - name: CONTAINER_SIZE
    value: medium
    type: text
  jobs:
  - name: Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      url: ${CF_TARGET_URL}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
    PORT: '6005'
    CONTAINER_NAME: csync
    DEPLOY_TYPE: red_black
    COMMAND: "#!/bin/bash\n# The following are some example deployment scripts.  Use\
      \ these as is or fork them and include your updates here:\necho *********\n\n\
      export IMAGE_NAME=${CCS_REGISTRY_HOST}/${NAMESPACE}/csync:latest\necho $IMAGE_NAME\n\
      echo *********\necho -e \"${label_color}Starting deployment script${no_color}\"\
      \n\n\n# To view/fork this script goto: https://github.com/Osthanes/deployscripts\n\
      # git_retry will retry git calls to prevent pipeline failure on temporary github\
      \ problems\n# the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n\n# You can deploy your Image as either a single Container or as a Container\
      \ \n# Group.  A Container Group deploys a number of containers to enhance\n\
      # scalability or reliability.  By default we will deploy as a single \n# container.\
      \  To switch to a group deploy, comment out the line below\n# containing deploycontainer.sh\
      \ and uncomment the line for deploygroup.sh\n\n# Deploy with containers:\n#\
      \ Optional environment properties (can be set directly in this script, or defined\
      \ as environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   BIND_TO           \
      \  String       Specify a Bluemix application name that whose bound services\
      \ you wish to make available to the container.  By default this is not set.\n\
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano\
      \ (128), micro (256), tiny (512), small (1024), medium (2048),\n#          \
      \                                                  large (4096), x-large (8192),\
      \ 2x-large (16384).\n#                                    Default is micro (256).\n\
      #   CONCURRENT_VERSIONS Number       Number of versions of this container to\
      \ leave active.  \n#                                    Default is 1\n#\n/bin/bash\
      \ deployscripts/deploycontainer.sh\n\n# Deploy Container Group:\n# Optional\
      \ environment properties (can be set directly in this script, or defined as\
      \ environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   ROUTE_HOSTNAME    \
      \  String       Specify the Hostname for the Cloud Foundry Route you wish to\
      \ assign to this container group.  By default this is not set.\n#   ROUTE_DOMAIN\
      \        String       Specify domain name for the Cloud Foundry Route you wish\
      \ to assign to this container group.  By default this is not set.\n#   BIND_TO\
      \             String       Specify a Bluemix application name that whose bound\
      \ services you wish to make available to the container.  By default this is\
      \ not set.\n#   DESIRED_INSTANCES:  Number       Specify the number of instances\
      \ in the group.  Default value is 1.\n#   AUTO_RECOVERY:      Boolean      Set\
      \ auto-recovery to true/false.  Default value is false.\n\n#               \
      \                     Default is false.\n#   CONTAINER_SIZE      String    \
      \   Specify container size: pico (64), nano (128), micro (256), tiny (512),\
      \ small (1024), medium (2048),\n#                                          \
      \                  large (4096), x-large (8192), 2x-large (16384).\n#      \
      \                              Default is micro (256).\n#   CONCURRENT_VERSIONS\
      \ Number       Number of versions of this group to leave active.\n#        \
      \                            Default is 1\n# IF YOU WANT CONTAINER GROUPS ..\
      \ uncomment the next line, and comment out the previous deployment line (/bin/bash\
      \ deployscripts/deploygroup.sh)\n#/bin/bash deployscripts/deploygroup.sh\n\n\
      RESULT=$?\n\n# source the deploy property file\nif [ -f \"${DEPLOY_PROPERTY_FILE}\"\
      \ ]; then\n  source \"$DEPLOY_PROPERTY_FILE\"\nfi\n\n#########################\n\
      # Environment DETAILS   #\n#########################\n# The environment has\
      \ been setup.\n# The Cloud Foundry CLI (cf), IBM Container Service CLI (ice),\
      \ Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have\
      \ been installed.\n# Based on the organization and space selected in the Job\
      \ credentials are in place for both IBM Container Service and IBM Bluemix\n\n\
      # The following colors have been defined to help with presentation of logs:\
      \ green, red, label_color, no_color.\nif [ $RESULT -ne 0 ]; then\n    echo -e\
      \ \"${red}Executed failed or had warnings ${no_color}\"\n    ${EXT_DIR}/print_help.sh\n\
      \    exit $RESULT\nfi\necho -e \"${green}Execution complete${no_label}\""

